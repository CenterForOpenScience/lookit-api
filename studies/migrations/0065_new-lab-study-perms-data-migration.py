# -*- coding: utf-8 -*-
# Generated by Django 1.11.28 on 2020-05-13 15:53
from __future__ import unicode_literals

from django.db import migrations

from studies.permissions import LabGroup, LabPermission, StudyGroup, StudyPermission


def add_all_permissions():
    """Enforce loading of perms

    See:
    https://stackoverflow.com/questions/29296757/django-data-migrate-permissions
    https://code.djangoproject.com/ticket/23422
    """
    from django.apps import apps
    from django.contrib.auth.management import create_permissions

    for app_config in apps.get_app_configs():
        app_config.models_module = True
        create_permissions(app_config, verbosity=0)
        app_config.models_module = None


def _create_groups(
    model_instance, group_enum, group_class, perm_class, group_object_permission_model
):
    uuid_segment = str(model_instance.uuid)[:7]
    object_name = model_instance._meta.object_name
    unique_group_tag = (
        f"{object_name} :: {model_instance.name[:7]}... ({uuid_segment}...)"
    )

    for group_spec in group_enum:
        # Group name is going to be something like "READ :: Lab :: MIT (0235dfa...)
        group_name = f"{group_spec.name} :: {unique_group_tag}"
        group = group_class.objects.create(name=group_name)

        for permission_meta in group_spec.value:
            permission = perm_class.objects.get(codename=permission_meta.codename)

            group_object_permission_model.objects.create(
                content_object=model_instance, permission=permission, group=group
            )
            group.save()

        setattr(model_instance, f"{group_spec.name.lower()}_group", group)

    model_instance.save()


def apply_migration(apps, schema_editor):
    """Lab group changes.

    Args:
        apps: instance of django.apps.registry.Apps
        schema_editor: instance of django.db.backends.base.schema.BaseDatabaseSchemaEditor

    Side Effects:
        Adds the single MIT Lab construct, along with associated groups.
    """
    # Enforce loading of perms from intermediate migrations, see:
    # https://stackoverflow.com/questions/29296757/django-data-migrate-permissions
    # https://code.djangoproject.com/ticket/23422
    add_all_permissions()
    # Treat this like module scope, since we can't import and have to deal with historical
    # models.
    Lab = apps.get_model("studies", "Lab")
    Study = apps.get_model("studies", "Study")
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    StudyGroupObjectPermission = apps.get_model("studies", "StudyGroupObjectPermission")
    LabGroupObjectPermission = apps.get_model("studies", "LabGroupObjectPermission")

    # Abstain from using QuerySet.create here; emulate what we'll need to do when these
    # group fields are non-nullable.
    mit_eccl_lab = Lab(
        name="MIT Early Childhood Cognition Lab",
        primary_investigator_name="Laura Schulz",
        contact_email="eccl@mit.edu",
        contact_phone="INSERT THE PHONE NUMBER HERE",
        lab_website="http://eccl.mit.edu/",
        description="The Early Childhood Cognition Lab at MIT.",
        irb_contact_info="Lots of IRB contact information",
    )

    mit_eccl_lab.save()
    # Have to save so that this can go in as content_object during execution
    # of assign_perm

    _create_groups(mit_eccl_lab, LabGroup, Group, Permission, LabGroupObjectPermission)

    for study in Study.objects.all():
        _create_groups(study, StudyGroup, Group, Permission, StudyGroupObjectPermission)


def revert_migration(apps, schema_editor):
    """Reverses the migration.

    Args:
        apps: instance of django.apps.registry.Apps
        schema_editor: instance of django.db.backends.base.schema.BaseDatabaseSchemaEditor
    """
    Lab = apps.get_model("studies", "Lab")
    Study = apps.get_model("studies", "Study")
    Group = apps.get_model("auth", "Group")
    Permission = apps.get_model("auth", "Permission")
    StudyGroupObjectPermission = apps.get_model("studies", "StudyGroupObjectPermission")
    LabGroupObjectPermission = apps.get_model("studies", "LabGroupObjectPermission")

    # These should cascade, effectively killing the related permissions. SET_NULL
    # behavior in Studies/Labs will prevent
    Group.objects.filter(
        id__in=StudyGroupObjectPermission.objects.values_list("group_id", flat=True)
    ).delete()

    Permission.objects.filter(
        id__in=StudyGroupObjectPermission.objects.values_list(
            "permission_id", flat=True
        )
    ).delete()

    Group.objects.filter(
        id__in=LabGroupObjectPermission.objects.values_list("group_id", flat=True)
    ).delete()

    Permission.objects.filter(
        id__in=LabGroupObjectPermission.objects.values_list("permission_id", flat=True)
    ).delete()

    labs = Lab.objects.all()
    if labs.exists():
        labs.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("studies", "0064_new-lab-study-perms-model-defs"),
        ("accounts", "0047_new-lab-study-perms-model-defs"),
    ]

    operations = [migrations.RunPython(apply_migration, revert_migration)]
