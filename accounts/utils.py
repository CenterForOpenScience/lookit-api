from django.utils.text import slugify
from django.contrib import messages

from guardian.shortcuts import get_perms


def build_org_group_name(org_name, group):
    '''
    Returns org group name in the form of <ORGNAME>_ORG_<GROUP>
    '''
    return f'{slugify({org_name})}_ORG_{group}'.upper()


def build_study_group_name(org_name, study_name, study_pk, group):
    '''
    Returns study group name in the form of <ORGNAME>_<TRUNCATED_STUDY_NAME>_<STUDY_PK>_STUDY_<GROUP>

    Study portion of group name is truncated to 20 characters
    '''
    return f'{slugify({org_name})}_{slugify({study_name[:20]})}_{study_pk}_STUDY_{group}'.upper()

# Dictionary with the states for the study and tooltip text for providing additional information
status_tooltip_text = {
    'created': 'Study has not been submitted for approval',
    'active': 'Study is collecting data',
    'submitted': 'Study is awaiting approval',
    'draft': 'Study has not been submitted for approval',
    'approved': 'Study is approved but not started',
    'rejected': 'Study has been rejected. Please edit before resubmitting.',
    'retracted': 'Study has been withdrawn',
    'paused': 'Study is not collecting data',
    'deactivated': 'Study is not collecting data',
    'archived': 'Study has been archived and removed from search.',
    'previewing': 'Study is being built and deployed to Google Cloud Storage for previewing.',
    'deploying': 'Study is being built and deployed to Google Cloud Storage'
}


def get_permitted_triggers(view_instance, triggers):
    '''Takes in the available triggers (next possible states) for a study and restricts that list
    based on the current user's permissions.
    The view_instance is the StudyDetailView or the StudyUpdateView.
    '''
    permitted_triggers = []
    user = view_instance.request.user
    study = view_instance.object
    study_permissions = get_perms(user, view_instance.object)

    admin_triggers = ['approve', 'reject']
    for trigger in triggers:
        # remove autogenerated triggers
        if trigger.startswith('to_'):
            continue

        # Trigger valid if 1) superuser 2) trigger is admin trigger and user is org admin 3) trigger is found in user's study permissions
        if not user.is_superuser:
            if trigger in admin_triggers:
                 if not (user.organization == study.organization and user.is_org_admin):
                     continue
            elif ('can_' + trigger + '_study') not in study_permissions:
                continue

        permitted_triggers.append(trigger)

    return permitted_triggers

def update_trigger(view_instance):
    ''' Transition to next state in study workflow '''
    trigger = view_instance.request.POST.get('trigger')
    object = view_instance.get_object()
    if trigger:
        if hasattr(object, trigger):
            # transition through workflow state
            getattr(object, trigger)(user=view_instance.request.user)
    if 'comments-text' in view_instance.request.POST.keys():
        object.comments = view_instance.request.POST['comments-text']
        object.save()
    displayed_state = object.state if object.state != 'active' else 'activated'
    messages.success(view_instance.request, f"Study {object.name} {displayed_state}.")
    return object
